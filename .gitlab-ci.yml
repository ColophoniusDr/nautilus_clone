variables:
    GIT_SUBMODULE_STRATEGY: normal
    BUNDLE: "nautilus-dev.flatpak"

stages:
    - test
    - cross_environment
    - deploy

.test_template: &distro_test
  script:
      - meson _build .
      - cd _build
      - ninja test

flatpak:
    image: registry.gitlab.gnome.org/gnome/gnome-runtime-images/gnome:3.28
    stage: test
    variables:
        MANIFEST_PATH: "build-aux/flatpak/org.gnome.Nautilus.yml"
        MESON_ARGS: "-Dprofile=development -Dtests=all"
        FLATPAK_MODULE: "nautilus"
        RUNTIME_REPO: "https://sdk.gnome.org/gnome.flatpakrepo"
        DBUS_ID: "org.gnome.NautilusDevel"

    before_script:
        - tar -xzf cache.tar.gz .flatpak-builder/cache/ || true
    script:
        - flatpak-builder --stop-at=${FLATPAK_MODULE} app ${MANIFEST_PATH}
        # Make sure to keep this in sync with the Flatpak manifest, all arguments
        # are passed except the config-args because we build it ourselves
        - flatpak build app meson --prefix=/app --libdir=lib ${MESON_ARGS} _build
        - flatpak build app ninja -C _build install
        - flatpak-builder --finish-only --repo=repo app ${MANIFEST_PATH}
        # Run automatic tests inside the Flatpak env
        - xvfb-run -a -s "-screen 0 1024x768x24" flatpak build app ninja -C _build test
        # Generate a Flatpak bundle
        - flatpak build-bundle repo ${BUNDLE} --runtime-repo=${RUNTIME_REPO} ${DBUS_ID}
    artifacts:
        paths:
            - ${BUNDLE}
            - _build/meson-logs/
        expire_in: 30 days
    cache:
        paths:
            - cache.tar.gz

flatpak:master:
    image: registry.gitlab.gnome.org/gnome/gnome-runtime-images/gnome:master
    stage: test
    variables:
        MANIFEST_PATH: "build-aux/flatpak/org.gnome.NautilusMaster.yml"
        MESON_ARGS: "-Dprofile=Master -Dtests=all"
        FLATPAK_MODULE: "nautilus"
        RUNTIME_REPO: "https://sdk.gnome.org/gnome-nightly.flatpakrepo"
        DBUS_ID: "org.gnome.NautilusMaster"

    script:
        - flatpak-builder --stop-at=${FLATPAK_MODULE} app ${MANIFEST_PATH}
        # Make sure to keep this in sync with the Flatpak manifest, all arguments
        # are passed except the config-args because we build it ourselves
        - flatpak build app meson --prefix=/app --libdir=lib ${MESON_ARGS} _build
        - flatpak build app ninja -C _build install
        - flatpak-builder --finish-only --repo=repo app ${MANIFEST_PATH}
        # Run automatic tests inside the Flatpak env
        - xvfb-run -a -s "-screen 0 1024x768x24" flatpak build app ninja -C _build test
        # Generate a Flatpak bundle
        - flatpak build-bundle repo ${BUNDLE} --runtime-repo=${RUNTIME_REPO} ${DBUS_ID}
    artifacts:
        paths:
            - ${BUNDLE}
            - _build/meson-logs/
        expire_in: 30 days
    cache:
        paths:
            - .flatpak-builder/cache