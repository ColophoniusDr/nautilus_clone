variables:
    GIT_SUBMODULE_STRATEGY: normal
    BUNDLE: "nautilus-dev.flatpak"

stages:
    - test
    - cross_environment
    - deploy

.test_template: &distro_test
  script:
      - meson _build .
      - cd _build
      - ninja test

.flatpak_templae: &flatpak
    script:
        - flatpak-builder --stop-at=${FLATPAK_MODULE} app ${MANIFEST_PATH}
        # Make sure to keep this in sync with the Flatpak manifest, all arguments
        # are passed except the config-args because we build it ourselves
        - flatpak build app meson --prefix=/app --libdir=lib ${MESON_ARGS} _build
        - flatpak build app ninja -C _build install
        - flatpak-builder --finish-only --repo=repo app ${MANIFEST_PATH}
        # Run automatic tests inside the Flatpak env
        - xvfb-run -a -s "-screen 0 1024x768x24" flatpak build app ninja -C _build test
        # Generate a Flatpak bundle
        - flatpak build-bundle repo ${BUNDLE} --runtime-repo=${RUNTIME_REPO} ${DBUS_ID}
    artifacts:
        paths:
            - ${BUNDLE}
            - _build/meson-logs/
        # The Flatpak bundle is always generated at the end, meaning that there
        # wonâ€™t be one in case of failure, but the logs will be available for
        # our expert investigators to dissect.
        when: always
        expire_in: 2 days

flatpak devel:
    image: registry.gitlab.gnome.org/gnome/gnome-runtime-images/gnome:3.30
    stage: test
    variables:
        MANIFEST_PATH: "build-aux/flatpak/org.gnome.Nautilus.yml"
        MESON_ARGS: "-Dprofile=Devel -Dtests=all"
        FLATPAK_MODULE: "nautilus"
        RUNTIME_REPO: "https://sdk.gnome.org/gnome.flatpakrepo"
        DBUS_ID: "org.gnome.NautilusDevel"
    <<: *flatpak

review:
    stage: deploy
    dependencies:
        - "flatpak devel"
    script:
        - echo "Generating flatpak deployment"
    artifacts:
        paths:
            - ${BUNDLE}
        expire_in: 30 days
    environment:
        name: review/$CI_COMMIT_REF_NAME
        url: https://gitlab.gnome.org/$CI_PROJECT_PATH/-/jobs/$CI_JOB_ID/artifacts/raw/${BUNDLE}
        on_stop: stop_review
    except:
        - master@GNOME/nautilus
        - tags

stop_review:
    stage: deploy
    script:
        - echo "Stopping flatpak deployment"
    when: manual
    environment:
        name: review/$CI_COMMIT_REF_NAME
        action: stop
    except:
        - master@GNOME/nautilus
        - tags

fedora rawhide:
    image: fedora:rawhide
    stage: cross_environment
    before_script:
        - dnf update -y --nogpgcheck
        - dnf install -y 'dnf-command(builddep)' redhat-rpm-config libseccomp-devel gcovr --nogpgcheck
        - dnf builddep -y nautilus --nogpgcheck
    script:
        - meson _build . -Db_coverage=true
        - cd _build
        - ninja test
        - gcovr --root=.
            --exclude=src/
            --exclude=../data/
            --exclude=../eel/check-program.c
            --exclude=../eel/eel-debug.c
            --exclude=../eel/eel-lib-self-check-functions.c
            --exclude=../eel/eel-self-checks.c
            --exclude=../src/animation/
            --exclude=../src/gtk/
            --exclude=../src/nautilus-lib-self-check-functions.c
            --exclude=../src/nautilus-self-check-functions.c
            --exclude=../subprojects/libgd/
            --exclude=../test/
    coverage: '/^TOTAL.*\s+(\d+\%)$/'

    only:
        - schedules
        - web
        - tags

ubuntu devel:
    image: ubuntu:devel
    stage: cross_environment
    variables:
        DEPENDANCIES: |
            git \
            gcc \
            meson \
            gettext \
            itstool \
            gobject-introspection \
            desktop-file-utils \
            libxml2-dev \
            libgtk-3-dev \
            libgexiv2-dev \
            libseccomp-dev \
            libgnome-autoar-0-dev \
            libgirepository1.0-dev \
            libtracker-sparql-2.0-dev \
            libtracker-control-2.0-dev \
            gsettings-desktop-schemas-dev \
    before_script:
        # Ubuntu requires running update to fetch metadata and find packges
        - apt-get update
        - apt-get install -y $DEPENDANCIES
    <<: *distro_test
    only:
        - schedules
        - web
        - tags

opensuse tumbleweed:
    image: opensuse:tumbleweed
    stage: cross_environment
    variables:
        DEPENDANCIES: |
            git \
            gcc \
            meson \
            itstool \
            gtk3-devel \
            gettext-tools \
            libxml2-devel \
            tracker-devel \
            libgexiv2-devel \
            gettext-runtime \
            gnome-autoar-devel \
            desktop-file-utils \
            gobject-introspection-devel \
            gsettings-desktop-schemas-devel \
            libseccomp-devel
    before_script:
        - zypper install -y $DEPENDANCIES
    <<: *distro_test
    only:
        - schedules
        - web
        - tags

flatpak master:
    image: registry.gitlab.gnome.org/gnome/gnome-runtime-images/gnome:master
    stage: cross_environment
    variables:
        MANIFEST_PATH: "build-aux/flatpak/org.gnome.NautilusMaster.yml"
        MESON_ARGS: "-Dprofile=Master -Dtests=all"
        FLATPAK_MODULE: "nautilus"
        RUNTIME_REPO: "https://sdk.gnome.org/gnome-nightly.flatpakrepo"
        DBUS_ID: "org.gnome.NautilusMaster"
    <<: *flatpak
    only:
        - schedules
        - web
        - tags

flatpak gtk4:
    image: registry.gitlab.gnome.org/gnome/gnome-runtime-images/gnome:master
    stage: cross_environment
    variables:
        MANIFEST_PATH: "build-aux/flatpak/org.gnome.NautilusGtk4.yml"
        MESON_ARGS: "-Dprofile=Gtk4 -Dtests=all"
        FLATPAK_MODULE: "nautilus"
        RUNTIME_REPO: "https://sdk.gnome.org/gnome-nightly.flatpakrepo"
        DBUS_ID: "org.gnome.NautilusGtk4"
    <<: *flatpak
    only:
        - schedules
        - web
        - tags
